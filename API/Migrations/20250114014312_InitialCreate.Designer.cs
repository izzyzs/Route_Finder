// <auto-generated />
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(GTFSDbContext))]
    [Migration("20250114014312_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("API.Models.CalendarDate", b =>
                {
                    b.Property<string>("ServiceID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExceptionType")
                        .HasColumnType("INTEGER");

                    b.HasKey("ServiceID", "Date");

                    b.ToTable("CalendarDates");
                });

            modelBuilder.Entity("API.Models.CalendarGTFS", b =>
                {
                    b.Property<string>("ServiceID")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Friday")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Monday")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Saturday")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Sunday")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Thursday")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tuesday")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Wednesday")
                        .HasColumnType("INTEGER");

                    b.HasKey("ServiceID");

                    b.ToTable("CalendarGTFSs");
                });

            modelBuilder.Entity("API.Models.RouteGTFS", b =>
                {
                    b.Property<string>("RouteID")
                        .HasColumnType("TEXT");

                    b.Property<string>("AgencyID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RouteColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RouteDesc")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RouteLongName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RouteShortName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RouteTextColor")
                        .HasColumnType("TEXT");

                    b.Property<int>("RouteType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RouteUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RouteID");

                    b.ToTable("RouteGTFSs");
                });

            modelBuilder.Entity("API.Models.Stop", b =>
                {
                    b.Property<string>("StopID")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LocationType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParentStation")
                        .HasColumnType("TEXT");

                    b.Property<double>("StopLat")
                        .HasColumnType("REAL");

                    b.Property<double>("StopLon")
                        .HasColumnType("REAL");

                    b.Property<string>("StopName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("StopID");

                    b.ToTable("Stops");
                });

            modelBuilder.Entity("API.Models.StopTime", b =>
                {
                    b.Property<string>("TripID")
                        .HasColumnType("TEXT");

                    b.Property<string>("StopSequence")
                        .HasColumnType("TEXT");

                    b.Property<string>("ArrivalTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DepartureTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StopID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TripID", "StopSequence");

                    b.ToTable("StopTimes");
                });

            modelBuilder.Entity("API.Models.Trip", b =>
                {
                    b.Property<string>("TripID")
                        .HasColumnType("TEXT");

                    b.Property<int>("DirectionID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RouteID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShapeID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TripHeadsign")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TripID");

                    b.ToTable("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
